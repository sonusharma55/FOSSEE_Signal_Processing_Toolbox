<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from pyulear.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="pyulear" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>pyulear</refname>
    <refpurpose></refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   [psd,f_out] = pyulear(x,poles,freq,Fs,range,method,plot_type)
   All but the first two arguments are optional and may be empty.
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>x:</term>
      <listitem><para>       [vector] sampled data</para></listitem></varlistentry>
   <varlistentry><term>poles:</term>
      <listitem><para>    [integer scalar] required number of poles of the AR model</para></listitem></varlistentry>
   <varlistentry><term>freq:</term>
      <listitem><para>     [real vector] frequencies at which power spectral density is calculated [integer scalar] number of uniformly distributed frequency values at which spectral density is calculated.    [default=256]</para></listitem></varlistentry>
   <varlistentry><term>Fs:</term>
      <listitem><para>       [real scalar] sampling frequency (Hertz) [default=1]</para></listitem></varlistentry>
   <varlistentry><term>range:</term>
      <listitem><para>    'half',  'onesided' : frequency range of the spectrum is from zero up to but not including sample_f/2.  Power from negative frequencies is added to the positive side of the spectrum.   'whole', 'twosided' : frequency range of the spectrum is -sample_f/2 to sample_f/2, with negative frequencies stored in "wrap around" order after the positive frequencies; e.g. frequencies for a 10-point 'twosided' spectrum are 0 0.1 0.2 0.3 0.4 0.5 -0.4 -0.3 -0.2 -0.1 'shift', 'centerdc' : same as 'whole' but with the first half of the spectrum swapped with second half to put the zero-frequency value in the middle. (See "help fftshift". If "freq" is vector, 'shift' is ignored. If model coefficients "ar_coeffs" are real, the default range is 'half', otherwise default range is 'whole'.</para></listitem></varlistentry>
   <varlistentry><term>method:</term>
      <listitem><para>   'fft':  use FFT to calculate power spectral density. 'poly': calculate spectral density as a polynomial of 1/z N.B. this argument is ignored if the "freq" argument is a vector.  The default is 'poly' unless the "freq" argument is an integer power of 2.</para></listitem></varlistentry>
   <varlistentry><term>plot_type:</term>
      <listitem><para>  'plot', 'semilogx', 'semilogy', 'loglog', 'squared' or 'db' specifies the type of plot.  The default is 'plot', which means linear-linear axes. 'squared' is the same as 'plot'. 'dB' plots "10*log10(psd)".  This argument is ignored and a spectrum is not plotted if the caller requires a returned value.</para></listitem></varlistentry>
   </variablelist>
</refsection>
</refentry>
